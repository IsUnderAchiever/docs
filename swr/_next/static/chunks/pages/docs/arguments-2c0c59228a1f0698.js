(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[922], { 6577: function (s, e, r) { (window.__NEXT_P = window.__NEXT_P || []).push(["/docs/arguments.html", function () { return r(9874) }]) }, 9874: function (s, e, r) { "use strict"; r.r(e), r.d(e, { __toc: function () { return t } }); var n = r(2676), o = r(3017), l = r(6952), i = r(4894); let t = [{ depth: 2, value: "多个参数", id: "multiple-arguments" }, { depth: 2, value: "传入对象", id: "passing-objects" }]; function c (s) { let e = Object.assign({ h1: "h1", p: "p", code: "code", pre: "pre", span: "span", h2: "h2", strong: "strong" }, (0, l.a)(), s.components); return (0, n.jsxs)(n.Fragment, { children: [(0, n.jsx)(e.h1, { children: "参数" }), "\n", (0, n.jsxs)(e.p, { children: ["默认情况下，", (0, n.jsx)(e.code, { children: "key" }), " 将作为参数传递给 ", (0, n.jsx)(e.code, { children: "fetcher" }), "。所以下面这 3 个表达式是等价的："] }), "\n", (0, n.jsx)(e.pre, { "data-language": "js", "data-theme": "default", hasCopyCode: !0, children: (0, n.jsxs)(e.code, { "data-language": "js", "data-theme": "default", children: [(0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " () " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "fetcher" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "))" })] }), "\n", (0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " url " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "fetcher" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(url))" })] }), "\n", (0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " fetcher)" })] })] }) }), "\n", (0, n.jsx)(e.h2, { id: "multiple-arguments", children: "多个参数" }), "\n", (0, n.jsxs)(e.p, { children: ["在某些场景中，向 ", (0, n.jsx)(e.code, { children: "fetcher" }), " 函数传递多个参数（可以是任何值或对象）非常有用。例如授权请求："] }), "\n", (0, n.jsx)(e.pre, { "data-language": "js", "data-theme": "default", hasCopyCode: !0, children: (0, n.jsx)(e.code, { "data-language": "js", "data-theme": "default", children: (0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " url " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "fetchWithToken" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(url" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " token))" })] }) }) }), "\n", (0, n.jsxs)(e.p, { children: ["这是 ", (0, n.jsx)(e.strong, { children: "错误的" }), "。 因为数据的标识符（也是缓存 key）是 ", (0, n.jsx)(e.code, { children: "'/api/user'" }), "，所以即使 ", (0, n.jsx)(e.code, { children: "token" }), " 变了，SWR 仍然会使用相同的 key 并返回错误的数据。"] }), "\n", (0, n.jsxs)(e.p, { children: ["相反，你可以使用一个 ", (0, n.jsx)(e.strong, { children: "数组" }), " 作为参数 ", (0, n.jsx)(e.code, { children: "key" }), "，它包含 ", (0, n.jsx)(e.code, { children: "fetcher" }), " 的多个参数："] }), "\n", (0, n.jsx)(e.pre, { "data-language": "js", "data-theme": "default", hasCopyCode: !0, children: (0, n.jsx)(e.code, { "data-language": "js", "data-theme": "default", children: (0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { data: " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "user" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "([" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " token]" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " ([url" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " token]) " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "fetchWithToken" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(url" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " token))" })] }) }) }), "\n", (0, n.jsxs)(e.p, { children: [(0, n.jsx)(e.code, { children: "fetcher" }), " 函数会按原样接受 ", (0, n.jsx)(e.code, { children: "key" }), " 参数，并且缓存 ", (0, n.jsx)(e.code, { children: "key" }), " 也将与整个 ", (0, n.jsx)(e.code, { children: "key" }), " 参数相关联。在上面的例子中，", (0, n.jsx)(e.code, { children: "url" }), " 和 ", (0, n.jsx)(e.code, { children: "token" }), " 都与缓存 ", (0, n.jsx)(e.code, { children: "key" }), " 相关联。"] }), "\n", (0, n.jsx)(i.UW, { emoji: "⚠️", children: (0, n.jsxs)(e.p, { children: ["在之前的版本 (< 2.0.0) 中，当 key 参数是数组类型时，", (0, n.jsx)(e.code, { children: "fetcher" }), " 函数将以展开参数的形式接收到原始 ", (0, n.jsx)(e.code, { children: "key" }), "。例如，key ", (0, n.jsx)(e.code, { children: "[url, token]" }), " 会变成 ", (0, n.jsx)(e.code, { children: "fetcher" }), " 函数的两个参数 ", (0, n.jsx)(e.code, { children: "(url, token)" }), "。"] }) }), "\n", (0, n.jsx)(e.h2, { id: "passing-objects", children: "传入对象" }), "\n", "\n", (0, n.jsx)(i.UW, { children: (0, n.jsx)(e.p, { children: "从 SWR 1.1.0 开始，object 类型的 keys 可以在内部自动被序列化。" }) }), "\n", (0, n.jsxs)(e.p, { children: ["假设你还有另一个使用用户范围来请求数据的函数：", (0, n.jsx)(e.code, { children: "fetchWithUser(api, user)" }), "。你可以执行以下操作："] }), "\n", (0, n.jsx)(e.pre, { "data-language": "js", "data-theme": "default", hasCopyCode: !0, children: (0, n.jsxs)(e.code, { "data-language": "js", "data-theme": "default", children: [(0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { data: " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "user" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "([" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " token]" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " fetchWithToken)" })] }), "\n", (0, n.jsx)(e.span, { className: "line", children: " " }), "\n", (0, n.jsx)(e.span, { className: "line", children: (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// ...然后将其作为参数传递给另一个 useSWR hook" }) }), "\n", (0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { data: " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "orders" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(user " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "?" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " [" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/orders'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " user] " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "null" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " fetchWithUser)" })] })] }) }), "\n", (0, n.jsxs)(e.p, { children: ["你可以直接传递一个对象作为 key，", (0, n.jsx)(e.code, { children: "fetcher" }), " 也会接收该对象："] }), "\n", (0, n.jsx)(e.pre, { "data-language": "js", "data-theme": "default", hasCopyCode: !0, children: (0, n.jsx)(e.code, { "data-language": "js", "data-theme": "default", children: (0, n.jsxs)(e.span, { className: "line", children: [(0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { data: " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "orders" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "({ url" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/orders'" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " args" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " user }" }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, n.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " fetcher)" })] }) }) }), "\n", (0, n.jsx)(i.UW, { emoji: "⚠️", children: (0, n.jsxs)(e.p, { children: ["在旧版本(< 1.1.0)中，SWR 会", (0, n.jsx)(e.strong, { children: "浅" }), "比较每次渲染时的参数，如果其中任何一个发生了变化，就会触发重新验证。"] }) })] }) } e.default = (0, o.j)({ MDXContent: function () { let s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, { wrapper: e } = Object.assign({}, (0, l.a)(), s.components); return e ? (0, n.jsx)(e, { ...s, children: (0, n.jsx)(c, { ...s }) }) : c(s) }, pageOpts: { filePath: "pages/docs/arguments.mdx.html", route: "/docs/arguments.html", title: "参数", headings: t }, pageNextRoute: "/docs/arguments.html" }) } }, function (s) { s.O(0, [17, 888, 774, 179], function () { return s(s.s = 6577) }), _N_E = s.O() }])