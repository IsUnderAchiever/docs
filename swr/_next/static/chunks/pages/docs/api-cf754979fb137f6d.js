(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[259], { 5773: function (e, n, s) { (window.__NEXT_P = window.__NEXT_P || []).push(["/docs/api.html", function () { return s(5822) }]) }, 5822: function (e, n, s) { "use strict"; s.r(n), s.d(n, { __toc: function () { return d } }); var i = s(2676), r = s(3017), l = s(6952), c = s(4894); let d = [{ depth: 2, value: "参数", id: "parameters" }, { depth: 2, value: "返回值", id: "return-values" }, { depth: 2, value: "选项", id: "options" }]; function o (e) { let n = Object.assign({ h1: "h1", pre: "pre", code: "code", span: "span", h2: "h2", ul: "ul", li: "li", a: "a", em: "em", p: "p" }, (0, l.a)(), e.components); return (0, i.jsxs)(i.Fragment, { children: [(0, i.jsx)(n.h1, { children: "API" }), "\n", (0, i.jsx)(n.pre, { "data-language": "js", "data-theme": "default", hasCopyCode: !0, children: (0, i.jsx)(n.code, { "data-language": "js", "data-theme": "default", children: (0, i.jsxs)(n.span, { className: "line", children: [(0, i.jsx)(n.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " { " }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-constant)" }, children: "data" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-constant)" }, children: "error" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-constant)" }, children: "isLoading" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-constant)" }, children: "isValidating" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-constant)" }, children: "mutate" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: "(key" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " fetcher" }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, i.jsx)(n.span, { style: { color: "var(--shiki-color-text)" }, children: " options)" })] }) }) }), "\n", (0, i.jsx)(n.h2, { id: "parameters", children: "参数" }), "\n", (0, i.jsxs)(n.ul, { children: ["\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "key" }), ": 请求的唯一 key string（或者是 function / array / null） ", (0, i.jsx)(n.a, { href: "/docs/arguments.html", children: "(详情)" }), ", ", (0, i.jsx)(n.a, { href: "/docs/conditional-fetching.html", children: "（高级用法）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "fetcher" }), ":（", (0, i.jsx)(n.em, { children: "可选" }), "）一个请求数据的 Promise 返回函数 ", (0, i.jsx)(n.a, { href: "/docs/data-fetching.html", children: "（详情）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "options" }), ":（", (0, i.jsx)(n.em, { children: "可选" }), "）该 SWR hook 的选项对象"] }), "\n"] }), "\n", (0, i.jsx)(n.h2, { id: "return-values", children: "返回值" }), "\n", (0, i.jsxs)(n.ul, { children: ["\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "data" }), ": 通过 ", (0, i.jsx)(n.code, { children: "fetcher" }), " 用给定的 key 获取的数据（如未完全加载，返回 undefined）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "error" }), ": ", (0, i.jsx)(n.code, { children: "fetcher" }), " 抛出的错误（或者是 undefined）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "isLoading" }), ": 是否有一个正在进行中的请求且当前没有“已加载的数据“。预设数据及之前的数据不会被视为“已加载的数据“"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "isValidating" }), ": 是否有请求或重新验证加载"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "mutate(data?, options?)" }), ": 更改缓存数据的函数 ", (0, i.jsx)(n.a, { href: "/docs/mutation.html", children: "（详情）" })] }), "\n"] }), "\n", (0, i.jsxs)(n.p, { children: ["更多信息可以参考", (0, i.jsx)(n.a, { href: "/docs/advanced/understanding.html", children: "这里" }), "."] }), "\n", (0, i.jsx)(n.h2, { id: "options", children: "选项" }), "\n", (0, i.jsxs)(n.ul, { children: ["\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "suspense = false" }), ": 启用 React Suspense 模式 ", (0, i.jsx)(n.a, { href: "/docs/suspense.html", children: "（详情）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "fetcher(args)" }), ": fetcher 函数"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "revalidateIfStale = true" }), ": 即使存在陈旧数据，也自动重新验证", (0, i.jsx)(n.a, { href: "/docs/revalidation#disable-automatic-revalidations.html", children: "（详情）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "revalidateOnMount" }), ": 在挂载组件时启用或禁用自动重新验证 ", (0, i.jsx)(n.a, { href: "/docs/revalidation#revalidate-on-mount.html", children: "（详情）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "revalidateOnFocus = true" }), ": 窗口聚焦时自动重新验证 ", (0, i.jsx)(n.a, { href: "/docs/revalidation.html", children: "（详情）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "revalidateOnReconnect = true" }), ": 浏览器恢复网络连接时自动重新验证（通过 ", (0, i.jsx)(n.code, { children: "navigator.onLine" }), "） ", (0, i.jsx)(n.a, { href: "/docs/revalidation.html", children: "（详情）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "refreshInterval" }), " ", (0, i.jsx)(n.a, { href: "/docs/revalidation.html", children: "（详情）" }), ":", "\n", (0, i.jsxs)(n.ul, { children: ["\n", (0, i.jsxs)(n.li, { children: ["默认 disabled: ", (0, i.jsx)(n.code, { children: "refreshInterval = 0" })] }), "\n", (0, i.jsx)(n.li, { children: "如果设置为数字，轮询间隔（以毫秒为单位）" }), "\n", (0, i.jsx)(n.li, { children: "如果设置为函数，该函数将接收最新数据，并且应以毫秒为单位返回间隔" }), "\n"] }), "\n"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "refreshWhenHidden = false" }), ": 窗口不可见时进行轮询（如果启用了 ", (0, i.jsx)(n.code, { children: "refreshInterval" }), "）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "refreshWhenOffline = false" }), ": 浏览器离线时轮询（由 ", (0, i.jsx)(n.code, { children: "navigator.onLine" }), " 确定）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "shouldRetryOnError = true" }), ": fetcher 有错误时重试"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "dedupingInterval = 2000" }), ": 删除一段时间内相同 key 的重复请求（以毫秒为单位）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "focusThrottleInterval = 5000" }), ": 在一段时间内只重新验证一次（以毫秒为单位）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "loadingTimeout = 3000" }), ": 超时触发 ", (0, i.jsx)(n.code, { children: "onLoadingSlow" }), " 事件（以毫秒为单位）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "errorRetryInterval = 5000" }), ": 错误重试的时间间隔（以毫秒为单位）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "errorRetryCount" }), ": 错误重试的最大次数"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "fallback" }), ": 多个回退数据的 key-value 对象", (0, i.jsx)(n.a, { href: "/docs/with-nextjs.html", children: "（示例）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "fallbackData" }), ": 此 hook 需要返回的初始数据"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "keepPreviousData = false" }), ": 在新数据加载完成之前使用 key 上一次缓存过的数据 ", (0, i.jsx)(n.a, { href: "/docs/advanced/understanding#return-previous-data-for-better-ux.html", children: "（详情）" })] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "onLoadingSlow(key, config)" }), ": 请求加载时间过长时的回调函数（参考 ", (0, i.jsx)(n.code, { children: "loadingTimeout" }), "）"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "onSuccess(data, key, config)" }), ": 请求成功完成时的回调函数"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "onError(err, key, config)" }), ": 请求返回错误时的回调函数"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "onErrorRetry(err, key, config, revalidate, revalidateOps)" }), ": 错误重试的处理函数"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "onDiscarded(key)" }), ": 请求由于竞态条件而被忽略时的回调函数"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "compare(a, b)" }), ": 比较函数，用来检测返回的数据何时已更改，以防止伪造的重新渲染。默认情况下使用 ", (0, i.jsx)(n.a, { href: "https://github.com/shuding/stable-hash", children: "stable-hash" }), "。"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "isPaused()" }), ": 用于暂停所有数据请求，如果返回值为 ", (0, i.jsx)(n.code, { children: "true" }), "，请求的数据和错误都会被忽略。默认返回值为 ", (0, i.jsx)(n.code, { children: "false" }), "。"] }), "\n", (0, i.jsxs)(n.li, { children: [(0, i.jsx)(n.code, { children: "use" }), ": 中间件函数数组 ", (0, i.jsx)(n.a, { href: "/docs/middleware.html", children: "（详情）" })] }), "\n"] }), "\n", (0, i.jsx)(c.UW, { emoji: "\uD83D\uDCA1", children: (0, i.jsxs)(n.p, { children: ["网络较慢（2G, ", "<=", " 70Kbps）时， 默认情况下 ", (0, i.jsx)("code", { children: "errorRetryInterval" }), " 为 10s， ", " ", "\n", (0, i.jsx)("code", { children: "loadingTimeout" }), " 为 5s。"] }) }), "\n", (0, i.jsxs)(n.p, { children: ["你还可以使用 ", (0, i.jsx)(n.a, { href: "/docs/global-configuration.html", children: "全局配置" }), " 来提供默认选项。"] })] }) } n.default = (0, r.j)({ MDXContent: function () { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, { wrapper: n } = Object.assign({}, (0, l.a)(), e.components); return n ? (0, i.jsx)(n, { ...e, children: (0, i.jsx)(o, { ...e }) }) : o(e) }, pageOpts: { filePath: "pages/docs/api.mdx.html", route: "/docs/api.html", title: "API", headings: d }, pageNextRoute: "/docs/api.html" }) } }, function (e) { e.O(0, [17, 888, 774, 179], function () { return e(e.s = 5773) }), _N_E = e.O() }])