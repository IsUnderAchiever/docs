(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[175], { 3642: function (s, e, r) { (window.__NEXT_P = window.__NEXT_P || []).push(["/docs/advanced/cache.html", function () { return r(2194) }]) }, 2194: function (s, e, r) { "use strict"; r.r(e), r.d(e, { __toc: function () { return a }, default: function () { return h } }); var l = r(2676), n = r(3017), o = r(6952), i = r(4894), c = () => (0, l.jsx)("div", { children: (0, l.jsxs)("svg", { viewBox: "0 0 588 311", fill: "none", class: "invert-on-dark", children: [(0, l.jsx)("path", { stroke: "#D2D2D2", d: "M22.5 59.5h543v232h-543z" }), (0, l.jsx)("path", { fill: "#fff", d: "M40 43h116v33H40z" }), (0, l.jsx)("path", { fill: "#141414" }), (0, l.jsx)("path", { stroke: "#D2D2D2", d: "M54.5 91.5h256v168h-256z" }), (0, l.jsx)("circle", { cx: "183", cy: "174", r: "44.5", fill: "#EAEAEA", stroke: "#D3D3D3" }), (0, l.jsx)("path", { fill: "#000" }), (0, l.jsx)("circle", { cx: "434", cy: "174", r: "44.5", fill: "#EAEAEA", stroke: "#D3D3D3" }), (0, l.jsx)("path", { fill: "#000" }), (0, l.jsx)("path", { fill: "#fff", d: "M72 75h116v33H72z" }), (0, l.jsx)("path", { fill: "#141414" }), (0, l.jsx)("path", { fill: "#9A9A9A" })] }) }); let a = [{ depth: 2, value: "缓存 Provider", id: "cache-provider" }, { depth: 2, value: "创建缓存 Provider", id: "create-cache-provider" }, { depth: 2, value: "访问当前缓存 Provider", id: "access-current-cache-provider" }, { depth: 2, value: "实验性：扩展缓存 provider", id: "experimental-extend-cache-provider" }, { depth: 2, value: "示例", id: "examples" }, { depth: 3, value: "基于 LocalStorage 的持久缓存", id: "localstorage-based-persistent-cache" }, { depth: 3, value: "重置测试用例之间的缓存", id: "reset-cache-between-test-cases" }, { depth: 3, value: "Modify the Cache Data", id: "modify-the-cache-data" }]; function t (s) { let e = Object.assign({ h1: "h1", p: "p", em: "em", a: "a", code: "code", h2: "h2", pre: "pre", span: "span", strong: "strong", h3: "h3" }, (0, o.a)(), s.components); return (0, l.jsxs)(l.Fragment, { children: [(0, l.jsx)(e.h1, { children: "缓存" }), "\n", (0, l.jsx)(i.UW, { children: (0, l.jsx)(e.p, { children: "升级到最新版本（≥ 1.0.0）来使用该功能。" }) }), "\n", (0, l.jsx)(i.UW, { emoji: "⚠️", children: (0, l.jsxs)(e.p, { children: ["在大多数情况下，你不应该直接", (0, l.jsx)(e.em, { children: "写入" }), "缓存，这可能会导致 SWR 不可预知的行为。如果你需要手动操作一个 key，请考虑使用 SWR API。", (0, l.jsx)("br", {}), "\n参见：", (0, l.jsx)(e.a, { href: "/docs/mutation.html", children: "数据更改" }), "，", (0, l.jsx)(e.a, { href: "#reset-cache-between-test-cases", children: "重置测试用例之间的缓存" }), "。"] }) }), "\n", (0, l.jsxs)(e.p, { children: ["默认情况下，SWR 使用全局缓存在所有组件之间存储和共享数据。但你也可以通过 ", (0, l.jsx)(e.code, { children: "SWRConfig" }), " 的 ", (0, l.jsx)(e.code, { children: "provider" }), " 选项来自定义这个行为。"] }), "\n", (0, l.jsx)(e.p, { children: "缓存 provider 旨在通过更多自定义存储启用 SWR。" }), "\n", (0, l.jsx)(e.h2, { id: "cache-provider", children: "缓存 Provider" }), "\n", (0, l.jsxs)(e.p, { children: ["缓存 provider 是类似 Map 的对象，它匹配以下 TypeScript 定义（可以从 ", (0, l.jsx)(e.code, { children: "swr" }), " 导入）："] }), "\n", (0, l.jsx)(e.pre, { "data-language": "typescript", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "typescript", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "interface" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Cache" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Data" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "> {" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "get" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(key" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "string" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ")" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Data" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "|" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "undefined" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "set" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(key" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "string" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " value" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Data" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ")" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "void" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "delete" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(key" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "string" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ")" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "void" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "keys" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "()" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "IterableIterator" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "string" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "}" }) })] }) }), "\n", (0, l.jsxs)(e.p, { children: ["例如，一个 ", (0, l.jsx)(e.a, { href: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map.html", children: "JavaScript Map" }), " 实例可以直接用作 SWR 的缓存 provider。"] }), "\n", (0, l.jsx)(e.h2, { id: "create-cache-provider", children: "创建缓存 Provider" }), "\n", (0, l.jsxs)(e.p, { children: [(0, l.jsx)(e.code, { children: "SWRConfig" }), " 的 ", (0, l.jsx)(e.code, { children: "provider" }), " 选项接收一个返回", (0, l.jsx)(e.a, { href: "#cache-provider", children: "缓存 provider" }), " 的函数。该 provider 将被 ", (0, l.jsx)(e.code, { children: "SWRConfig" }), " 范围内的所有 SWR hook 使用。例如："] }), "\n", (0, l.jsx)(e.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "jsx", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "import" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " useSWR" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { SWRConfig } " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "from" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'swr'" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: " " }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "function" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "App" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "() {" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "return" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " (" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "    <" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "{{ " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "provider" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " () " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "new" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Map" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "() }}>" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "      <" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "Page" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "/>" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "    </" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  )" }) }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "}" }) })] }) }), "\n", (0, l.jsxs)(e.p, { children: [(0, l.jsx)(e.code, { children: "<Page/>" }), " 中的所有 SWR hook 都将从该 Map 实例读取和写入。你还可以针对你的特定用例使用其他缓存 provider 实现。"] }), "\n", (0, l.jsx)(i.UW, { children: (0, l.jsxs)(e.p, { children: ["在上面的例子中，当 ", (0, l.jsx)(e.code, { children: "<App/>" }), " 组件重新挂载时，provider 也会被重新创建。缓存 provider 应该放在组件树的更高位置，或者放在渲染之外。"] }) }), "\n", "\n", (0, l.jsx)("div", { className: "my-8", children: (0, l.jsx)(c, {}) }), "\n", (0, l.jsxs)(e.p, { children: ["当嵌套时，SWR hook 将使用上层缓存 provider。如果没有上层缓存 provider，则回退到默认 provider，即一个空 ", (0, l.jsx)(e.code, { children: "Map" }), "。"] }), "\n", (0, l.jsx)(i.UW, { emoji: "⚠️", children: (0, l.jsxs)(e.p, { children: ["如果使用了缓存 provider，则全局 ", (0, l.jsx)(e.code, { children: "mutate" }), " 将", (0, l.jsx)(e.strong, { children: "不" }), "适用于 ", (0, l.jsx)(e.code, { children: "<SWRConfig>" }), " 范围内的 SWR hook。请使用", (0, l.jsx)(e.a, { href: "#access-current-cache-provider", children: "访问当前缓存 Provider" }), " 代替。"] }) }), "\n", (0, l.jsx)(e.h2, { id: "access-current-cache-provider", children: "访问当前缓存 Provider" }), "\n", (0, l.jsxs)(e.p, { children: ["在 React 组件内部，你需要使用 ", (0, l.jsx)(e.a, { href: "/docs/global-configuration#access-to-global-configurations.html", children: (0, l.jsx)(e.code, { children: "useSWRConfig" }) }), " hook 来访问当前缓存 provider 以及其他配置，包括 ", (0, l.jsx)(e.code, { children: "mutate" }), "："] }), "\n", (0, l.jsx)(e.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "jsx", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "import" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { useSWRConfig } " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "from" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'swr'" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: " " }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "function" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Avatar" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "() {" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "cache" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "mutate" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "..." }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "extraConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "()" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// ..." })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "}" }) })] }) }), "\n", (0, l.jsxs)(e.p, { children: ["如果不在任何 ", (0, l.jsx)(e.code, { children: "<SWRConfig>" }), " 中，将返回默认配置。"] }), "\n", (0, l.jsx)(e.h2, { id: "experimental-extend-cache-provider", children: "实验性：扩展缓存 provider" }), "\n", (0, l.jsx)(i.UW, { emoji: "\uD83E\uDDEA", children: (0, l.jsx)(e.p, { children: "这是一个实验性的功能，在未来的升级中可能会发生变化。" }) }), "\n", (0, l.jsxs)(e.p, { children: ["当多个 ", (0, l.jsx)(e.code, { children: "<SWRConfig>" }), " 组件嵌套时，可以扩展缓存 provider。"] }), "\n", (0, l.jsxs)(e.p, { children: [(0, l.jsx)(e.code, { children: "provider" }), " 函数的第一个参数是上层 ", (0, l.jsx)(e.code, { children: "<SWRConfig>" }), " 的缓存 provider（如果没有父级 ", (0, l.jsx)(e.code, { children: "<SWRConfig>" }), "，则为默认缓存），你可以使用它来扩展缓存 provider："] }), "\n", (0, l.jsx)(e.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "jsx", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "{{ " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "provider" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " (cache) " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " newCache }}>" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  ..." }) }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "</" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] })] }) }), "\n", (0, l.jsx)(e.h2, { id: "examples", children: "示例" }), "\n", (0, l.jsx)(e.h3, { id: "localstorage-based-persistent-cache", children: "基于 LocalStorage 的持久缓存" }), "\n", (0, l.jsxs)(e.p, { children: ["你可能希望将缓存同步到 ", (0, l.jsx)(e.code, { children: "localStorage" }), "。下面是一个示例实现："] }), "\n", (0, l.jsx)(e.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "jsx", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "function" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "localStorageProvider" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "() {" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// 初始化时，我们将数据从 `localStorage` 恢复到一个 map 中。" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "map" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "new" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Map" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "JSON" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: ".parse" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "localStorage" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: ".getItem" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'app-cache'" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ") " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "||" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'[]'" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "))" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: " " }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// 在卸载 app 之前，我们将所有数据写回 `localStorage` 中。" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "window" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: ".addEventListener" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'beforeunload'" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " () " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " {" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "    " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "appCache" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "JSON" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: ".stringify" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "Array" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: ".from" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "map" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: ".entries" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "()))" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "    " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "localStorage" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: ".setItem" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'app-cache'" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " appCache)" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  })" }) }), "\n", (0, l.jsx)(e.span, { className: "line", children: " " }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// 我们仍然使用 map 进行读写以提高性能。" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "return" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " map" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "}" }) })] }) }), "\n", (0, l.jsx)(e.p, { children: "然后将其作为 provider 使用：" }), "\n", (0, l.jsx)(e.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "jsx", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "{{ provider" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " localStorageProvider }}>" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  <" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "App" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "/>" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "</" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] })] }) }), "\n", (0, l.jsx)(i.UW, { children: (0, l.jsxs)(e.p, { children: ["作为一种改进，你还可以使用内存缓存作为缓冲区，并定期写入 ", (0, l.jsx)(e.code, { children: "localStorage" }), "。你还可以使用 IndexedDB 或 WebSQL 实现类似的分层缓存。"] }) }), "\n", (0, l.jsx)(e.h3, { id: "reset-cache-between-test-cases", children: "重置测试用例之间的缓存" }), "\n", (0, l.jsx)(e.p, { children: "在测试应用程序时，你可能希望重置测试用例之间的 SWR 缓存。你可以简单地使用空缓存 provider 包装你的应用程序。下面是一个使用 Jest 的例子：" }), "\n", (0, l.jsx)(e.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "jsx", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "describe" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'test suite'" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "async" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " () " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " {" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "it" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'test case'" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "async" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " () " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " {" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "    " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "render" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "      <" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "{{ " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "provider" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " () " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "new" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "Map" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "() }}>" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "        <" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "App" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "/>" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "      </" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "    )" }) }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  })" }) }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "})" }) })] }) }), "\n", (0, l.jsx)(e.h3, { id: "modify-the-cache-data", children: "Modify the Cache Data" }), "\n", (0, l.jsx)(i.UW, { emoji: "\uD83D\uDEA8", type: "error", children: (0, l.jsx)(e.p, { children: "你不应该直接写入缓存，那样可能会导致不可预知的行为。" }) }), "\n", (0, l.jsxs)(e.p, { children: ["You can use ", (0, l.jsx)(e.a, { href: "/docs/mutation.html", children: (0, l.jsx)(e.code, { children: "mutate" }) }), " to modify the cache. For example, you can clear all cache data like the following."] }), "\n", (0, l.jsx)(e.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, l.jsxs)(e.code, { "data-language": "jsx", "data-theme": "default", children: [(0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " { " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "mutate" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWRConfig" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "()" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: " " }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-token-function)" }, children: "mutate" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "(" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  key " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "true" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// which cache keys are updated" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "undefined" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// update cache data to `undefined`" })] }), "\n", (0, l.jsxs)(e.span, { className: "line", children: [(0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: "  { revalidate" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-constant)" }, children: "false" }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, l.jsx)(e.span, { style: { color: "var(--shiki-token-comment)" }, children: "// do not revalidate" })] }), "\n", (0, l.jsx)(e.span, { className: "line", children: (0, l.jsx)(e.span, { style: { color: "var(--shiki-color-text)" }, children: ")" }) })] }) }), "\n", (0, l.jsxs)(e.p, { children: ["More information can be found ", (0, l.jsx)(e.a, { href: "/docs/arguments#multiple-arguments.html", children: "here" }), "."] })] }) } var h = (0, n.j)({ MDXContent: function () { let s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, { wrapper: e } = Object.assign({}, (0, o.a)(), s.components); return e ? (0, l.jsx)(e, { ...s, children: (0, l.jsx)(t, { ...s }) }) : t(s) }, pageOpts: { filePath: "pages/docs/advanced/cache.mdx.html", route: "/docs/advanced/cache.html", title: "缓存", headings: a }, pageNextRoute: "/docs/advanced/cache.html" }) } }, function (s) { s.O(0, [17, 888, 774, 179], function () { return s(s.s = 3642) }), _N_E = s.O() }])