(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[943], { 4378: function (e, s, n) { (window.__NEXT_P = window.__NEXT_P || []).push(["/blog/swr-v1.html", function () { return n(5693) }]) }, 5693: function (e, s, n) { "use strict"; n.r(s), n.d(s, { __toc: function () { return a } }); var r = n(2676), l = n(3017), i = n(6952), t = n(7591); let a = [{ depth: 2, value: "新变化", id: "whats-new" }, { depth: 3, value: "更轻量", id: "smaller-size" }, { depth: 3, value: "预请求数据", id: "fallback-data" }, { depth: 3, value: "不可变模式", id: "immutable-mode" }, { depth: 3, value: "自定义缓存 Provider", id: "custom-cache-provider" }, { depth: 3, value: "useSWRConfig()", id: "useswrconfig" }, { depth: 3, value: "中间件", id: "middleware" }, { depth: 3, value: "改进以及更好的测试覆盖率", id: "improvements-and-better-test-coverage" }, { depth: 3, value: "文档翻译", id: "docs-translations" }, { depth: 2, value: "迁移指南", id: "migration-guide" }, { depth: 3, value: "更新 useSWRInfinite 导入", id: "update-useswrinfinite-imports" }, { depth: 3, value: "将 revalidate 改为 mutate", id: "change-revalidate-to-mutate" }, { depth: 3, value: "将 initialData 重命名为 fallbackData", id: "rename-initialdata-to-fallbackdata" }, { depth: 3, value: "取消默认 Fetcher", id: "no-more-default-fetcher" }, { depth: 3, value: "建议使用 Hook 返回的 mutate", id: "recommend-to-use-the-hook-returned-mutate" }, { depth: 3, value: "重命名类型", id: "renamed-types" }, { depth: 3, value: "Beta 及非官方功能用户", id: "beta-and-unofficial-feature-users" }, { depth: 3, value: "更新日志", id: "changelog" }, { depth: 2, value: "未来", id: "whats-next" }, { depth: 2, value: "致谢！", id: "thank-you" }]; function c (e) { let s = Object.assign({ h1: "h1", p: "p", a: "a", h2: "h2", h3: "h3", strong: "strong", ul: "ul", li: "li", code: "code", pre: "pre", span: "span", em: "em", table: "table", thead: "thead", tr: "tr", th: "th", tbody: "tbody", td: "td" }, (0, i.a)(), e.components); return (0, r.jsxs)(r.Fragment, { children: [(0, r.jsx)(s.h1, { id: "announcing-swr-10", children: "SWR 1.0 发布" }), "\n", (0, r.jsxs)(t.Z, { date: "2021年8月27日", children: [(0, r.jsx)(t.S, { name: "Shu Ding", link: "https://twitter.com/shuding_" }), (0, r.jsx)(t.S, { name: "Jiachi Liu", link: "https://twitter.com/huozhi" })] }), "\n", (0, r.jsxs)(s.p, { children: ["大约两年前，我们 ", (0, r.jsx)(s.a, { href: "https://twitter.com/vercel/status/1188911002626097157", children: "开源了" }), " SWR——广受大家喜爱的小巧 React 数据请求库。今天，我们迎来了另一个里程碑：SWR 1.0 版本发布了！"] }), "\n", (0, r.jsx)(s.h2, { id: "whats-new", children: "新变化" }), "\n", (0, r.jsx)(s.h3, { id: "smaller-size", children: "更轻量" }), "\n", (0, r.jsxs)(s.p, { children: [(0, r.jsx)(s.a, { href: "/docs/advanced/performance.html", children: "性能" }), "是 SWR 最重要的特性之一。在 1.0 中，我们在", (0, r.jsx)(s.strong, { children: "没有删除任何现有功能" }), "的前提下，将库变得更轻量："] }), "\n", (0, r.jsxs)(s.ul, { children: ["\n", (0, r.jsxs)(s.li, { children: ["核心减小为 41%（压缩后为 24%，", (0, r.jsx)(s.strong, { children: "3.9 kB" }), "）"] }), "\n", (0, r.jsx)(s.li, { children: "安装包减小为 52%" }), "\n", (0, r.jsx)(s.li, { children: "改进 tree-shaking" }), "\n"] }), "\n", (0, r.jsxs)(s.p, { children: ["让库更轻量的原因有很多：比如你的应用程序包将更小、运行时更精简，以及 ", (0, r.jsx)(s.code, { children: "node_modules" }), " 目录更小。"] }), "\n", (0, r.jsx)(s.p, { children: "我们还改进了打包方式，现在支持路径导入：" }), "\n", (0, r.jsx)(s.pre, { "data-language": "js", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "js", "data-theme": "default", children: [(0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "import" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " useSWR " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "from" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'swr'" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "import" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " useSWRInfinite " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "from" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'swr/infinite'" })] })] }) }), "\n", (0, r.jsxs)(s.p, { children: ["如果你不使用 ", (0, r.jsx)(s.code, { children: "useSWRInfinite" }), "，它将不会包含在你的应用程序中。"] }), "\n", (0, r.jsx)(s.h3, { id: "fallback-data", children: "预请求数据" }), "\n", (0, r.jsxs)(s.p, { children: ["在 1.0 中，有一个新的 ", (0, r.jsx)(s.code, { children: "fallback" }), " 选项，你可以提供任何预请求数据作为带有特定 key 的所有 SWR hook 的初始值："] }), "\n", (0, r.jsx)(s.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "jsx", "data-theme": "default", children: [(0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "{{" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  fallback" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " {" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "    " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/user'" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " { name" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'Bob'" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "..." }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " }" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "    " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'/api/items'" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "..." }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "    " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "..." })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  }" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "}}>" }) }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  <" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "App" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "/>" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "</" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] })] }) }), "\n", (0, r.jsxs)(s.p, { children: ["这对于 SSG、SSR 和测试中的数据模拟等场景非常有帮助。查看文档 ", (0, r.jsx)(s.a, { href: "/docs/with-nextjs.html", children: "Next.js SSG 和 SSR" }), " 了解更多细节。"] }), "\n", (0, r.jsxs)(s.p, { children: ["为了更好的一致性以及避免混淆，旧的 ", (0, r.jsx)(s.code, { children: "initialData" }), " 现已被重命名为 ", (0, r.jsx)(s.code, { children: "fallbackData" }), "，它仍然为给定的 hook 提供一个预请求值。"] }), "\n", (0, r.jsx)(s.h3, { id: "immutable-mode", children: "不可变模式" }), "\n", (0, r.jsxs)(s.p, { children: ["有时你希望将永远不会改变的资源标记为", (0, r.jsx)(s.strong, { children: "不可变的" }), "。最好是禁用它的自动重新请求且只发出一次请求。现在有了这样一个辅助 hook 就更容易了："] }), "\n", (0, r.jsx)(s.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "jsx", "data-theme": "default", children: [(0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "import" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " useSWRImmutable " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "from" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'swr/immutable'" })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-comment)" }, children: "// ..." }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWRImmutable" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "(key" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " fetcher" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " options)" })] })] }) }), "\n", (0, r.jsxs)(s.p, { children: ["它具有与 ", (0, r.jsx)(s.code, { children: "useSWR" }), " hook 完全相同的 API，但它永远不会在浏览器标签页获得焦点或网络恢复时重新请求。还有一个新选项 ", (0, r.jsx)(s.code, { children: "revalidateIfStale" }), "，你可以使用它来精确地控制行为。了解更多信息请查看", (0, r.jsx)(s.a, { href: "/docs/revalidation#disable-automatic-revalidations.html", children: "这里" }), "。"] }), "\n", (0, r.jsx)(s.h3, { id: "custom-cache-provider", children: "自定义缓存 Provider" }), "\n", (0, r.jsxs)(s.p, { children: ["默认情况下，SWR 使用单个全局缓存来存储所有数据。在 1.0 中，你可以使用新的 ", (0, r.jsx)(s.code, { children: "provider" }), " 选项自定义："] }), "\n", (0, r.jsx)(s.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "jsx", "data-theme": "default", children: [(0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "{{" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "provider" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " () " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " myCache" })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "}}>" }) }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  <" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "App" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "/>" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "</" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] })] }) }), "\n", (0, r.jsxs)(s.p, { children: ["你可以使用这个新功能做很多强大的事情。这里有几个例子：", (0, r.jsx)(s.a, { href: "/docs/advanced/cache#mutate-multiple-keys-from-regex.html", children: (0, r.jsx)(s.em, { children: "根据正则更改多个 Key" }) }), "、", (0, r.jsx)(s.a, { href: "/docs/advanced/cache#localstorage-based-persistent-cache.html", children: (0, r.jsx)(s.em, { children: "基于 LocalStorage 的持久缓存" }) }), "、", (0, r.jsx)(s.a, { href: "/docs/advanced/cache#reset-cache-between-test-cases.html", children: (0, r.jsx)(s.em, { children: "重置测试用例之间的缓存" }) }), "。"] }), "\n", (0, r.jsxs)(s.p, { children: ["这个新的缓存 provider API 也更兼容 React 18 的并发渲染。如果你正要添加一个缓存 provider，请确保使用从 ", (0, r.jsx)(s.code, { children: "useSWRConfig()" }), " 返回的全局 ", (0, r.jsx)(s.code, { children: "mutate" }), " 函数。"] }), "\n", (0, r.jsxs)(s.p, { children: ["请阅读文档", (0, r.jsx)(s.a, { href: "/docs/advanced/cache.html", children: "缓存 Provider" }), " 了解更多细节。"] }), "\n", (0, r.jsx)(s.h3, { id: "useswrconfig", children: "useSWRConfig()" }), "\n", (0, r.jsxs)(s.p, { children: ["一个新的 Hook API 来返回所有的全局配置，包括当前缓存 provider 和全局 ", (0, r.jsx)(s.code, { children: "mutate" }), " 函数："] }), "\n", (0, r.jsx)(s.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "jsx", "data-theme": "default", children: [(0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "import" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " { useSWRConfig } " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "from" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-string-expression)" }, children: "'swr'" })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "function" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "Foo" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " () {" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "const" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " { " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "refreshInterval" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "cache" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "mutate" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "..." }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "restConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " } " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "()" })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-comment)" }, children: "// ..." })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "}" }) })] }) }), "\n", (0, r.jsxs)(s.p, { children: ["更多信息请查看", (0, r.jsx)(s.a, { href: "/docs/global-configuration#access-to-global-configurations.html", children: "这里" }), "。"] }), "\n", (0, r.jsx)(s.h3, { id: "middleware", children: "中间件" }), "\n", (0, r.jsx)(s.p, { children: "SWR 中间件为你提供了一种在 SWR hook 之上构建和重用抽象的新方法：" }), "\n", (0, r.jsx)(s.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "jsx", "data-theme": "default", children: [(0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "{{ use" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " [" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "..." }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "middleware] }}>" })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "// ... 或直接在 `useSWR` 中：" }) }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "useSWR(key, fetcher, { use: [" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "..." }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "middleware] })" })] })] }) }), "\n", (0, r.jsxs)(s.p, { children: ["使用该功能可以实现很多新想法，我们已经构建了一些示例：", (0, r.jsx)(s.a, { href: "/docs/middleware#request-logger.html", children: (0, r.jsx)(s.em, { children: "请求日志记录器" }) }), "、", (0, r.jsx)(s.a, { href: "/docs/middleware#keep-previous-result.html", children: (0, r.jsx)(s.em, { children: "Key 变化时仍保留之前的结果" }) }), "以及", (0, r.jsx)(s.a, { href: "/docs/middleware#serialize-object-keys.html", children: (0, r.jsx)(s.em, { children: "序列化对象 key" }) })] }), "\n", (0, r.jsxs)(s.p, { children: ["查看 ", (0, r.jsx)(s.a, { href: "/docs/middleware.html", children: "中间件 API" }), " 以了解更多细节。"] }), "\n", (0, r.jsx)(s.h3, { id: "improvements-and-better-test-coverage", children: "改进以及更好的测试覆盖率" }), "\n", (0, r.jsxs)(s.p, { children: ["从 0.x 开始，我们已经做了数百个小改进和 bug 修复。现在 SWR 有 157 个测试，覆盖了数据请求中的大多数边界情况。请阅读", (0, r.jsx)(s.a, { href: "https://github.com/vercel/swr/releases", children: "更新日志" }), "了解更多细节。"] }), "\n", (0, r.jsx)(s.h3, { id: "docs-translations", children: "文档翻译" }), "\n", (0, r.jsxs)(s.p, { children: ["感谢我们的 ", (0, r.jsx)(s.a, { href: "https://github.com/vercel/swr-site/graphs/contributors", children: "contributor" }), " 和 Nextra 的 ", (0, r.jsx)(s.a, { href: "https://nextra.vercel.app/features/i18n", children: "i18n 功能" }), "，SWR 文档现在有六种不同的语言："] }), "\n", (0, r.jsxs)(s.ul, { children: ["\n", (0, r.jsx)(s.li, { children: (0, r.jsx)(s.a, { href: "https://swr.vercel.app", children: "英语" }) }), "\n", (0, r.jsx)(s.li, { children: (0, r.jsx)(s.a, { href: "https://swr.vercel.app/es-ES", children: "西班牙语" }) }), "\n", (0, r.jsx)(s.li, { children: (0, r.jsx)(s.a, { href: "https://swr.vercel.app/zh-CN", children: "简体中文" }) }), "\n", (0, r.jsx)(s.li, { children: (0, r.jsx)(s.a, { href: "https://swr.vercel.app/ja", children: "日语" }) }), "\n", (0, r.jsx)(s.li, { children: (0, r.jsx)(s.a, { href: "https://swr.vercel.app/ko", children: "韩语" }) }), "\n", (0, r.jsx)(s.li, { children: (0, r.jsx)(s.a, { href: "https://swr.vercel.app/ru", children: "俄语" }) }), "\n"] }), "\n", (0, r.jsx)(s.h2, { id: "migration-guide", children: "迁移指南" }), "\n", (0, r.jsxs)(s.h3, { id: "update-useswrinfinite-imports", children: ["更新 ", (0, r.jsx)(s.code, { children: "useSWRInfinite" }), " 导入"] }), "\n", (0, r.jsxs)(s.p, { children: [(0, r.jsx)(s.code, { children: "useSWRInfinite" }), " 需要从 ", (0, r.jsx)(s.code, { children: "swr/infinite" }), " 导入:"] }), "\n", (0, r.jsx)(s.pre, { "data-language": "diff", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "diff", "data-theme": "default", children: [(0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#EF6270" }, children: "- import { useSWRInfinite } from 'swr'" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#4BB74A" }, children: "+ import useSWRInfinite from 'swr/infinite'" }) })] }) }), "\n", (0, r.jsx)(s.p, { children: "如果你正在使用相应的类型，也要更新导入路径：" }), "\n", (0, r.jsx)(s.pre, { "data-language": "diff", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "diff", "data-theme": "default", children: [(0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#EF6270" }, children: "- import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr'" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#4BB74A" }, children: "+ import { SWRInfiniteConfiguration, SWRInfiniteResponse } from 'swr/infinite'" }) })] }) }), "\n", (0, r.jsxs)(s.h3, { id: "change-revalidate-to-mutate", children: ["将 ", (0, r.jsx)(s.code, { children: "revalidate" }), " 改为 ", (0, r.jsx)(s.code, { children: "mutate" })] }), "\n", (0, r.jsxs)(s.p, { children: [(0, r.jsx)(s.code, { children: "useSWR" }), " 不再返回 ", (0, r.jsx)(s.code, { children: "revalidate" }), " 方法，请改为 ", (0, r.jsx)(s.code, { children: "mutate" }), "："] }), "\n", (0, r.jsx)(s.pre, { "data-language": "diff", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "diff", "data-theme": "default", children: [(0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#EF6270" }, children: "- const { revalidate } = useSWR(key, fetcher, options)" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#4BB74A" }, children: "+ const { mutate } = useSWR(key, fetcher, options)" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  // ..." }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#EF6270" }, children: "- revalidate()" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#4BB74A" }, children: "+ mutate()" }) })] }) }), "\n", (0, r.jsxs)(s.h3, { id: "rename-initialdata-to-fallbackdata", children: ["将 ", (0, r.jsx)(s.code, { children: "initialData" }), " 重命名为 ", (0, r.jsx)(s.code, { children: "fallbackData" })] }), "\n", (0, r.jsx)(s.pre, { "data-language": "diff", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "diff", "data-theme": "default", children: [(0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#EF6270" }, children: "- useSWR(key, fetcher, { initialData: ... })" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#4BB74A" }, children: "+ useSWR(key, fetcher, { fallbackData: ... })" }) })] }) }), "\n", (0, r.jsx)(s.h3, { id: "no-more-default-fetcher", children: "取消默认 Fetcher" }), "\n", (0, r.jsxs)(s.p, { children: ["SWR 不再提供默认的 fetcher（将数据解析为 JSON 的 ", (0, r.jsx)(s.code, { children: "fetch" }), " 调用）。迁移更改的最简单方法是使用 ", (0, r.jsx)(s.code, { children: "<SWRConfig>" }), " 组件："] }), "\n", (0, r.jsx)(s.pre, { "data-language": "jsx", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "jsx", "data-theme": "default", children: [(0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "<" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "value" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "{{ " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "fetcher" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: ":" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " (url) " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "fetch" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "(url)" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: ".then" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "(res " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "res" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: ".json" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "()) }}>" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  <" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "App" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "/>" })] }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "</" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "SWRConfig" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: ">" })] }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-comment)" }, children: "// ... 或" }) }), "\n", (0, r.jsxs)(s.span, { className: "line", children: [(0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "useSWR" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "(key" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-punctuation)" }, children: "," }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " (url) " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: "fetch" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "(url)" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: ".then" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "(res " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-keyword)" }, children: "=>" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: " " }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-constant)" }, children: "res" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-token-function)" }, children: ".json" }), (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "()))" })] })] }) }), "\n", (0, r.jsxs)(s.h3, { id: "recommend-to-use-the-hook-returned-mutate", children: ["建议使用 Hook 返回的 ", (0, r.jsx)(s.code, { children: "mutate" })] }), "\n", (0, r.jsxs)(s.p, { children: ["这", (0, r.jsx)(s.strong, { children: "不是" }), "一个破坏性的更改，但我们", (0, r.jsx)(s.em, { children: "建议" }), "一直使用从 ", (0, r.jsx)(s.code, { children: "useSWRConfig" }), " hook 返回的 ", (0, r.jsx)(s.code, { children: "mutate" }), "："] }), "\n", (0, r.jsx)(s.pre, { "data-language": "diff", "data-theme": "default", hasCopyCode: !0, children: (0, r.jsxs)(s.code, { "data-language": "diff", "data-theme": "default", children: [(0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#EF6270" }, children: "- import { mutate } from 'swr'" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#4BB74A" }, children: "+ import { useSWRConfig } from 'swr'" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  function Foo () {" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "#4BB74A" }, children: "+   const { mutate } = useSWRConfig()" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: " " }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "    return <button onClick={() => mutate('key')}>" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "      Mutate Key" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "    </button>" }) }), "\n", (0, r.jsx)(s.span, { className: "line", children: (0, r.jsx)(s.span, { style: { color: "var(--shiki-color-text)" }, children: "  }" }) })] }) }), "\n", (0, r.jsxs)(s.p, { children: ["如果你没有使用缓存 provider，当前的全局导入 ", (0, r.jsx)(s.code, { children: "import { mutate } from 'swr'" }), " 仍然有效。"] }), "\n", (0, r.jsx)(s.h3, { id: "renamed-types", children: "重命名类型" }), "\n", (0, r.jsx)(s.p, { children: "如果你使用 TypeScript，为了保持一致，以下类型名已更改：" }), "\n", (0, r.jsxs)(s.table, { children: [(0, r.jsx)(s.thead, { children: (0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.th, { children: "0.x （废弃）" }), (0, r.jsx)(s.th, { children: "1.0" }), (0, r.jsx)(s.th, { children: "Note" })] }) }), (0, r.jsxs)(s.tbody, { children: [(0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "ConfigInterface" }) }), (0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "SWRConfiguration" }) }), (0, r.jsx)(s.td, {})] }), (0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "keyInterface" }) }), (0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "Key" }) }), (0, r.jsx)(s.td, {})] }), (0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "responseInterface" }) }), (0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "SWRResponse" }) }), (0, r.jsx)(s.td, {})] }), (0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "RevalidateOptionInterface" }) }), (0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "RevalidatorOptions" }) }), (0, r.jsx)(s.td, {})] }), (0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "revalidateType" }) }), (0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "Revalidator" }) }), (0, r.jsx)(s.td, {})] }), (0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "SWRInfiniteResponseInterface" }) }), (0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "SWRInfiniteResponse" }) }), (0, r.jsxs)(s.td, { children: ["移到 ", (0, r.jsx)(s.code, { children: "swr/infinite" })] })] }), (0, r.jsxs)(s.tr, { children: [(0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "SWRInfiniteConfigInterface" }) }), (0, r.jsx)(s.td, { children: (0, r.jsx)(s.code, { children: "SWRInfiniteConfiguration" }) }), (0, r.jsxs)(s.td, { children: ["移到 ", (0, r.jsx)(s.code, { children: "swr/infinite" })] })] })] })] }), "\n", (0, r.jsx)(s.h3, { id: "beta-and-unofficial-feature-users", children: "Beta 及非官方功能用户" }), "\n", (0, r.jsx)(s.p, { children: "如果你使用的是 SWR 的 Beta 版本，或使用任何未公开的 API，请注意以下更改：" }), "\n", (0, r.jsxs)(s.ul, { children: ["\n", (0, r.jsxs)(s.li, { children: [(0, r.jsx)(s.code, { children: "import { cache } from 'swr'" }), " 已经移除；使用新的 ", (0, r.jsxs)(s.a, { href: "#useswrconfig", children: [(0, r.jsx)(s.code, { children: "useSWRConfig" }), " API"] }), "。"] }), "\n", (0, r.jsxs)(s.li, { children: [(0, r.jsx)(s.code, { children: "import { createCache } from 'swr'" }), " 已经移除；使用新的 ", (0, r.jsx)(s.a, { href: "/docs/advanced/cache.html", children: "Cache Provider API" }), "。"] }), "\n", (0, r.jsxs)(s.li, { children: [(0, r.jsx)(s.code, { children: "revalidateWhenStale" }), " 已重命名为 ", (0, r.jsx)(s.code, { children: "revalidateIfStale" }), "。"] }), "\n", (0, r.jsxs)(s.li, { children: [(0, r.jsx)(s.code, { children: "middlewares" }), " 已重命名为 ", (0, r.jsx)(s.code, { children: "use" }), "。"] }), "\n"] }), "\n", (0, r.jsx)(s.h3, { id: "changelog", children: "更新日志" }), "\n", (0, r.jsxs)(s.p, { children: ["去 ", (0, r.jsx)(s.a, { href: "https://github.com/vercel/swr/releases", children: "GitHub" }), " 阅读完整更新日志。"] }), "\n", (0, r.jsx)(s.h2, { id: "whats-next", children: "未来" }), "\n", (0, r.jsx)(s.p, { children: "在未来的版本中，我们将在保持稳定性的同时不断改进。我们还打算拥抱未来的 React 版本，1.0 中的一些新功能和改进已经在为此做准备了。此外，我们仍在开发新功能，以改善在 React 中进行数据请求的体验以及使用 SWR 的体验。" }), "\n", (0, r.jsxs)(s.p, { children: ["如果你对该版本有任何意见，请", (0, r.jsx)(s.a, { href: "https://github.com/vercel/swr/discussions", children: "告诉我们" }), "。"] }), "\n", (0, r.jsx)(s.h2, { id: "thank-you", children: "致谢！" }), "\n", (0, r.jsxs)(s.p, { children: ["特别感谢 ", (0, r.jsx)(s.a, { href: "https://twitter.com/koba04", children: "Toru Kobayashi" }), " 和 ", (0, r.jsx)(s.a, { href: "https://twitter.com/yixuanxu94", children: "Yixuan Xu" }), " 对 SWR 的贡献，同时感谢 ", (0, r.jsx)(s.a, { href: "https://twitter.com/pacocoursey", children: "Paco Coursey" }), "、", (0, r.jsx)(s.a, { href: "https://github.com/uttk", children: "uttk" }), "、", (0, r.jsx)(s.a, { href: "https://github.com/shioyang", children: "Tomohiro SHIOYA" }), "、", (0, r.jsx)(s.a, { href: "https://github.com/markozxuu", children: "Markoz Pe\xf1a" }), "、", (0, r.jsx)(s.a, { href: "https://github.com/cs09g", children: "SeulGi Choi" }), "、", (0, r.jsx)(s.a, { href: "https://github.com/huzhengen", children: "Fang Lu" }), "、", (0, r.jsx)(s.a, { href: "https://github.com/valentinpolitov", children: "Valentin Politov" }), " 在翻译和文档方面的贡献。没有他们就没有这个版本。"] }), "\n", (0, r.jsxs)(s.p, { children: ["我们还要感谢整个社区、我们的 ", (0, r.jsx)(s.a, { href: "https://github.com/vercel/swr/graphs/contributors", children: "110 个 contributor" }), "（+ ", (0, r.jsx)(s.a, { href: "https://github.com/vercel/swr-site/graphs/contributors", children: "45 个文档 contributor" }), "）以及所有帮助过我们以及给过我们意见的人！"] })] }) } s.default = (0, l.j)({ MDXContent: function () { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, { wrapper: s } = Object.assign({}, (0, i.a)(), e.components); return s ? (0, r.jsx)(s, { ...e, children: (0, r.jsx)(c, { ...e }) }) : c(e) }, pageOpts: { filePath: "pages/blog/swr-v1.mdx.html", route: "/blog/swr-v1.html", frontMatter: { image: "https://assets.vercel.com/image/upload/v1630059453/swr/v1.png", description: "大约两年前，我们开源了 SWR——广受大家喜爱的小巧 React 数据请求库。今天，我们迎来了另一个里程碑：SWR 1.0 版本发布了！", date: "August 27th, 2021" }, title: "SWR 1.0 发布", headings: a }, pageNextRoute: "/blog/swr-v1.html" }) }, 7591: function (e, s, n) { "use strict"; n.d(s, { S: function () { return i }, Z: function () { return l } }); var r = n(2676); function l (e) { let { date: s, children: n, by: l = "by" } = e; return (0, r.jsxs)("div", { className: "mt-4 mb-16 text-gray-500 text-sm", children: [s, " ", l, " ", n] }) } function i (e) { let { name: s, link: n } = e; return (0, r.jsx)("span", { className: "after:content-[','] last:after:content-['']", children: (0, r.jsx)("a", { href: n, target: "_blank", className: "mx-1 text-current underline [text-underline-position:from-font] decoration-from-font", children: s }, s) }) } } }, function (e) { e.O(0, [17, 888, 774, 179], function () { return e(e.s = 4378) }), _N_E = e.O() }])